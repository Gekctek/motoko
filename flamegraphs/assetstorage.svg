<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="230.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >assetstorage.mo</text>
<text id="details" x="10.00" y="213" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="213" > </text>
<g id="frames">
<g >
<title>motoko_rts::principal_id::enc_stash::hd09f7ce2f6e06dba (372 samples, 1.04%)</title><rect x="378.0" y="101" width="12.3" height="15.0" fill="rgb(229,127,26)" rx="2" ry="2" />
<text  x="381.00" y="111.5" ></text>
</g>
<g >
<title>opt_inject (14 samples, 0.04%)</title><rect x="583.5" y="85" width="0.5" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="586.50" y="95.5" ></text>
</g>
<g >
<title>can_tag_i64 (8 samples, 0.02%)</title><rect x="525.4" y="85" width="0.3" height="15.0" fill="rgb(234,106,32)" rx="2" ry="2" />
<text  x="528.39" y="95.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::compacting_gc::h6c11211cef49c9d1 (8,785 samples, 24.66%)</title><rect x="10.4" y="133" width="291.1" height="15.0" fill="rgb(231,127,29)" rx="2" ry="2" />
<text  x="13.43" y="143.5" >motoko_rts::gc::mark_compact::compactin..</text>
</g>
<g >
<title>canister_self (46 samples, 0.13%)</title><rect x="391.0" y="133" width="1.5" height="15.0" fill="rgb(238,106,36)" rx="2" ry="2" />
<text  x="393.99" y="143.5" ></text>
</g>
<g >
<title>to_2_tuple (451 samples, 1.27%)</title><rect x="566.9" y="69" width="14.9" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="569.87" y="79.5" ></text>
</g>
<g >
<title>Blob.compare_eq (47 samples, 0.13%)</title><rect x="730.0" y="133" width="1.6" height="15.0" fill="rgb(239,126,38)" rx="2" ry="2" />
<text  x="733.00" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::types::object_size::h0cd0fcbd64ac8470 (768 samples, 2.16%)</title><rect x="276.0" y="117" width="25.5" height="15.0" fill="rgb(238,127,36)" rx="2" ry="2" />
<text  x="279.03" y="127.5" >m..</text>
</g>
<g >
<title>obj_idx&lt;0&gt; (51 samples, 0.14%)</title><rect x="581.8" y="85" width="1.7" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="584.81" y="95.5" ></text>
</g>
<g >
<title>motoko_rts::text::text_compare_range::ha4c502cafd109f9c (237 samples, 0.67%)</title><rect x="665.6" y="53" width="7.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="668.56" y="63.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="633.1" y="133" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="636.13" y="143.5" ></text>
</g>
<g >
<title>leb128_decode (134 samples, 0.38%)</title><rect x="609.9" y="133" width="4.5" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="612.94" y="143.5" ></text>
</g>
<g >
<title>obj_idx&lt;0&gt; (17 samples, 0.05%)</title><rect x="673.4" y="133" width="0.6" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="676.41" y="143.5" ></text>
</g>
<g >
<title>leb128_decode (134 samples, 0.38%)</title><rect x="800.7" y="117" width="4.4" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="803.70" y="127.5" ></text>
</g>
<g >
<title>init (22 samples, 0.06%)</title><rect x="418.0" y="117" width="0.7" height="15.0" fill="rgb(236,161,34)" rx="2" ry="2" />
<text  x="421.02" y="127.5" ></text>
</g>
<g >
<title>core::str::converts::from_utf8::h828634ce6cdca907 (162 samples, 0.45%)</title><rect x="689.3" y="101" width="5.4" height="15.0" fill="rgb(235,133,33)" rx="2" ry="2" />
<text  x="692.28" y="111.5" ></text>
</g>
<g >
<title>memcpy (72 samples, 0.20%)</title><rect x="727.5" y="101" width="2.4" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="730.48" y="111.5" ></text>
</g>
<g >
<title>compacting_gc (8,786 samples, 24.67%)</title><rect x="10.4" y="149" width="291.1" height="15.0" fill="rgb(227,149,24)" rx="2" ry="2" />
<text  x="13.40" y="159.5" >compacting_gc</text>
</g>
<g >
<title>core::str::converts::from_utf8::h828634ce6cdca907 (188 samples, 0.53%)</title><rect x="781.3" y="101" width="6.3" height="15.0" fill="rgb(235,133,33)" rx="2" ry="2" />
<text  x="784.35" y="111.5" ></text>
</g>
<g >
<title>@reset_refund (6 samples, 0.02%)</title><rect x="632.8" y="149" width="0.2" height="15.0" fill="rgb(248,161,48)" rx="2" ry="2" />
<text  x="635.80" y="159.5" ></text>
</g>
<g >
<title>alloc_words (52 samples, 0.15%)</title><rect x="519.0" y="117" width="1.7" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="521.97" y="127.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="742.9" y="85" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="745.92" y="95.5" ></text>
</g>
<g >
<title>compacting_gc (10,873 samples, 30.53%)</title><rect x="828.6" y="149" width="360.2" height="15.0" fill="rgb(227,149,24)" rx="2" ry="2" />
<text  x="831.59" y="159.5" >compacting_gc</text>
</g>
<g >
<title>alloc_words (78 samples, 0.22%)</title><rect x="558.3" y="69" width="2.5" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="561.26" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (136 samples, 0.38%)</title><rect x="438.8" y="85" width="4.5" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="441.79" y="95.5" ></text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="713.6" y="149" width="1.2" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="716.60" y="159.5" ></text>
</g>
<g >
<title>obj_idx&lt;0&gt; (51 samples, 0.14%)</title><rect x="584.4" y="101" width="1.7" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="587.43" y="111.5" ></text>
</g>
<g >
<title>alloc_blob (144 samples, 0.40%)</title><rect x="438.5" y="101" width="4.8" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="441.53" y="111.5" ></text>
</g>
<g >
<title>list (6,591 samples, 18.50%)</title><rect x="418.7" y="165" width="218.4" height="15.0" fill="rgb(232,113,30)" rx="2" ry="2" />
<text  x="421.75" y="175.5" >list</text>
</g>
<g >
<title>leb128_decode (67 samples, 0.19%)</title><rect x="773.5" y="117" width="2.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="776.50" y="127.5" ></text>
</g>
<g >
<title>@deserialize_go&lt;t&gt; (462 samples, 1.30%)</title><rect x="772.3" y="133" width="15.3" height="15.0" fill="rgb(244,176,43)" rx="2" ry="2" />
<text  x="775.27" y="143.5" ></text>
</g>
<g >
<title>iterate (1,989 samples, 5.58%)</title><rect x="520.7" y="117" width="65.9" height="15.0" fill="rgb(245,143,45)" rx="2" ry="2" />
<text  x="523.69" y="127.5" >iterate</text>
</g>
<g >
<title>add (327 samples, 0.92%)</title><rect x="526.0" y="85" width="10.9" height="15.0" fill="rgb(253,156,53)" rx="2" ry="2" />
<text  x="529.02" y="95.5" ></text>
</g>
<g >
<title>alloc_words (260 samples, 0.73%)</title><rect x="310.7" y="117" width="8.6" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="313.68" y="127.5" ></text>
</g>
<g >
<title>parse_idl_header (550 samples, 1.54%)</title><rect x="614.4" y="133" width="18.2" height="15.0" fill="rgb(243,149,41)" rx="2" ry="2" />
<text  x="617.38" y="143.5" ></text>
</g>
<g >
<title>memcpy (60 samples, 0.17%)</title><rect x="435.5" y="53" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="438.51" y="63.5" ></text>
</g>
<g >
<title>to_2_tuple (82 samples, 0.23%)</title><rect x="459.8" y="101" width="2.7" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="462.80" y="111.5" ></text>
</g>
<g >
<title>memcpy (60 samples, 0.17%)</title><rect x="764.7" y="117" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="767.72" y="127.5" ></text>
</g>
<g >
<title>text_size (4 samples, 0.01%)</title><rect x="434.5" y="69" width="0.1" height="15.0" fill="rgb(245,171,44)" rx="2" ry="2" />
<text  x="437.45" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::mark_object::h4c1039fc91f5c068 (888 samples, 2.49%)</title><rect x="244.4" y="117" width="29.4" height="15.0" fill="rgb(233,127,31)" rx="2" ry="2" />
<text  x="247.36" y="127.5" >mo..</text>
</g>
<g >
<title>$lambda (958 samples, 2.69%)</title><rect x="718.3" y="149" width="31.8" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="721.34" y="159.5" >$l..</text>
</g>
<g >
<title>@buffer_size&lt;B&gt; (33 samples, 0.09%)</title><rect x="642.2" y="101" width="1.1" height="15.0" fill="rgb(251,118,51)" rx="2" ry="2" />
<text  x="645.24" y="111.5" ></text>
</g>
<g >
<title>opt_inject (14 samples, 0.04%)</title><rect x="743.8" y="85" width="0.4" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="746.78" y="95.5" ></text>
</g>
<g >
<title>get (671 samples, 1.88%)</title><rect x="651.2" y="133" width="22.2" height="15.0" fill="rgb(237,170,35)" rx="2" ry="2" />
<text  x="654.18" y="143.5" >get</text>
</g>
<g >
<title>entries (454 samples, 1.27%)</title><rect x="447.5" y="133" width="15.0" height="15.0" fill="rgb(237,196,36)" rx="2" ry="2" />
<text  x="450.47" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::compacting_gc::h6c11211cef49c9d1 (10,872 samples, 30.52%)</title><rect x="828.6" y="133" width="360.2" height="15.0" fill="rgb(231,127,29)" rx="2" ry="2" />
<text  x="831.63" y="143.5" >motoko_rts::gc::mark_compact::compacting_gc::h6c..</text>
</g>
<g >
<title>Text.compare_lt (283 samples, 0.79%)</title><rect x="664.0" y="85" width="9.4" height="15.0" fill="rgb(226,187,24)" rx="2" ry="2" />
<text  x="667.04" y="95.5" ></text>
</g>
<g >
<title>alloc_words (52 samples, 0.15%)</title><rect x="320.5" y="133" width="1.7" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="323.49" y="143.5" ></text>
</g>
<g >
<title>idl_sub_buf_words (18 samples, 0.05%)</title><rect x="609.3" y="133" width="0.6" height="15.0" fill="rgb(241,184,39)" rx="2" ry="2" />
<text  x="612.34" y="143.5" ></text>
</g>
<g >
<title>obj_idx&lt;1&gt; (17 samples, 0.05%)</title><rect x="737.6" y="133" width="0.6" height="15.0" fill="rgb(246,139,45)" rx="2" ry="2" />
<text  x="740.62" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::mark_stack::push_mark_stack::h372a7e8aba233246 (425 samples, 1.19%)</title><rect x="1136.4" y="101" width="14.1" height="15.0" fill="rgb(237,127,36)" rx="2" ry="2" />
<text  x="1139.43" y="111.5" ></text>
</g>
<g >
<title>sleb128_decode (84 samples, 0.24%)</title><rect x="707.5" y="117" width="2.8" height="15.0" fill="rgb(250,128,49)" rx="2" ry="2" />
<text  x="710.54" y="127.5" ></text>
</g>
<g >
<title>B_add (25 samples, 0.07%)</title><rect x="524.8" y="101" width="0.9" height="15.0" fill="rgb(253,143,53)" rx="2" ry="2" />
<text  x="527.83" y="111.5" ></text>
</g>
<g >
<title>link_start (727 samples, 2.04%)</title><rect x="394.7" y="165" width="24.0" height="15.0" fill="rgb(239,129,37)" rx="2" ry="2" />
<text  x="397.66" y="175.5" >l..</text>
</g>
<g >
<title>memcpy (118 samples, 0.33%)</title><rect x="443.3" y="101" width="3.9" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="446.30" y="111.5" ></text>
</g>
<g >
<title>to_2_tuple (41 samples, 0.12%)</title><rect x="747.2" y="101" width="1.3" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="750.16" y="111.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="725.2" y="85" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="728.23" y="95.5" ></text>
</g>
<g >
<title>memset (104 samples, 0.29%)</title><rect x="1083.4" y="117" width="3.4" height="15.0" fill="rgb(237,144,35)" rx="2" ry="2" />
<text  x="1086.36" y="127.5" ></text>
</g>
<g >
<title>reply_with_data (4 samples, 0.01%)</title><rect x="729.9" y="117" width="0.1" height="15.0" fill="rgb(235,175,33)" rx="2" ry="2" />
<text  x="732.87" y="127.5" ></text>
</g>
<g >
<title>trans_state5 (13 samples, 0.04%)</title><rect x="1189.6" y="149" width="0.4" height="15.0" fill="rgb(241,158,40)" rx="2" ry="2" />
<text  x="1192.57" y="159.5" ></text>
</g>
<g >
<title>alloc_words (52 samples, 0.15%)</title><rect x="460.8" y="85" width="1.7" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="463.79" y="95.5" ></text>
</g>
<g >
<title>parse_idl_header (378 samples, 1.06%)</title><rect x="697.8" y="133" width="12.5" height="15.0" fill="rgb(243,149,41)" rx="2" ry="2" />
<text  x="700.80" y="143.5" ></text>
</g>
<g >
<title>Array.unsafe_idx (7 samples, 0.02%)</title><rect x="430.5" y="85" width="0.2" height="15.0" fill="rgb(247,150,46)" rx="2" ry="2" />
<text  x="433.51" y="95.5" ></text>
</g>
<g >
<title>opt_inject (28 samples, 0.08%)</title><rect x="458.9" y="101" width="0.9" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="461.87" y="111.5" ></text>
</g>
<g >
<title>init (2,779 samples, 7.80%)</title><rect x="301.5" y="149" width="92.0" height="15.0" fill="rgb(236,161,34)" rx="2" ry="2" />
<text  x="304.47" y="159.5" >init</text>
</g>
<g >
<title>to_2_tuple (41 samples, 0.12%)</title><rect x="744.2" y="85" width="1.4" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="747.25" y="95.5" ></text>
</g>
<g >
<title>motoko_rts::principal_id::principal_of_blob::h82817579bc445a3b (945 samples, 2.65%)</title><rect x="359.0" y="117" width="31.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="362.02" y="127.5" >mo..</text>
</g>
<g >
<title>motoko_rts::text::text_get_range::hf3253fb1b86772bc (28 samples, 0.08%)</title><rect x="663.1" y="37" width="0.9" height="15.0" fill="rgb(226,127,24)" rx="2" ry="2" />
<text  x="666.11" y="47.5" ></text>
</g>
<g >
<title>memset (4 samples, 0.01%)</title><rect x="695.1" y="117" width="0.2" height="15.0" fill="rgb(237,144,35)" rx="2" ry="2" />
<text  x="698.15" y="127.5" ></text>
</g>
<g >
<title>__wasm_apply_global_relocs (16 samples, 0.04%)</title><rect x="417.3" y="133" width="0.6" height="15.0" fill="rgb(244,119,43)" rx="2" ry="2" />
<text  x="420.32" y="143.5" ></text>
</g>
<g >
<title>leb128_decode (67 samples, 0.19%)</title><rect x="682.4" y="117" width="2.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="685.43" y="127.5" ></text>
</g>
<g >
<title>blob_of_principal (2,076 samples, 5.83%)</title><rect x="322.2" y="133" width="68.8" height="15.0" fill="rgb(228,110,25)" rx="2" ry="2" />
<text  x="325.21" y="143.5" >blob_of..</text>
</g>
<g >
<title>trans_state4 (23 samples, 0.06%)</title><rect x="393.9" y="149" width="0.8" height="15.0" fill="rgb(243,158,42)" rx="2" ry="2" />
<text  x="396.90" y="159.5" ></text>
</g>
<g >
<title>can_tag_i64 (8 samples, 0.02%)</title><rect x="535.6" y="53" width="0.3" height="15.0" fill="rgb(234,106,32)" rx="2" ry="2" />
<text  x="538.60" y="63.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="687.4" y="85" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="690.40" y="95.5" ></text>
</g>
<g >
<title>Array_tabulate (213 samples, 0.60%)</title><rect x="589.4" y="101" width="7.0" height="15.0" fill="rgb(245,150,45)" rx="2" ry="2" />
<text  x="592.37" y="111.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="744.7" y="69" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="747.74" y="79.5" ></text>
</g>
<g >
<title>memcmp (95 samples, 0.27%)</title><rect x="669.3" y="37" width="3.2" height="15.0" fill="rgb(238,144,36)" rx="2" ry="2" />
<text  x="672.34" y="47.5" ></text>
</g>
<g >
<title>rts_start (27 samples, 0.08%)</title><rect x="417.9" y="133" width="0.8" height="15.0" fill="rgb(239,145,37)" rx="2" ry="2" />
<text  x="420.86" y="143.5" ></text>
</g>
<g >
<title>idl_sub_buf_init (38 samples, 0.11%)</title><rect x="608.1" y="133" width="1.2" height="15.0" fill="rgb(236,184,34)" rx="2" ry="2" />
<text  x="611.08" y="143.5" ></text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="391.3" y="117" width="1.2" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="394.32" y="127.5" ></text>
</g>
<g >
<title>next (1,196 samples, 3.36%)</title><rect x="542.2" y="85" width="39.6" height="15.0" fill="rgb(230,219,27)" rx="2" ry="2" />
<text  x="545.19" y="95.5" >next</text>
</g>
<g >
<title>alloc_words (832 samples, 2.34%)</title><rect x="491.4" y="101" width="27.6" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="494.40" y="111.5" >a..</text>
</g>
<g >
<title>set_local %i1 (6 samples, 0.02%)</title><rect x="820.4" y="133" width="0.2" height="15.0" fill="rgb(232,154,29)" rx="2" ry="2" />
<text  x="823.38" y="143.5" ></text>
</g>
<g >
<title>@serialize&lt;vt&gt; (763 samples, 2.14%)</title><rect x="421.9" y="117" width="25.3" height="15.0" fill="rgb(237,156,36)" rx="2" ry="2" />
<text  x="424.93" y="127.5" >@..</text>
</g>
<g >
<title>@buffer_size&lt;u&gt; (14 samples, 0.04%)</title><rect x="724.5" y="101" width="0.5" height="15.0" fill="rgb(243,118,42)" rx="2" ry="2" />
<text  x="727.50" y="111.5" ></text>
</g>
<g >
<title>memcpy (48 samples, 0.13%)</title><rect x="355.2" y="117" width="1.6" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="358.17" y="127.5" ></text>
</g>
<g >
<title>trans_state6 (26 samples, 0.07%)</title><rect x="635.4" y="149" width="0.8" height="15.0" fill="rgb(240,158,38)" rx="2" ry="2" />
<text  x="638.38" y="159.5" ></text>
</g>
<g >
<title>set_local %i0 (6 samples, 0.02%)</title><rect x="820.2" y="133" width="0.2" height="15.0" fill="rgb(233,154,31)" rx="2" ry="2" />
<text  x="823.18" y="143.5" ></text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="826.5" y="149" width="1.2" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="829.54" y="159.5" ></text>
</g>
<g >
<title>anon-func-165.17 (355 samples, 1.00%)</title><rect x="525.7" y="101" width="11.7" height="15.0" fill="rgb(233,164,31)" rx="2" ry="2" />
<text  x="528.66" y="111.5" ></text>
</g>
<g >
<title>text_to_buf (88 samples, 0.25%)</title><rect x="434.6" y="69" width="2.9" height="15.0" fill="rgb(242,171,41)" rx="2" ry="2" />
<text  x="437.59" y="79.5" ></text>
</g>
<g >
<title>Buffer (1,436 samples, 4.03%)</title><rect x="471.4" y="117" width="47.6" height="15.0" fill="rgb(241,127,40)" rx="2" ry="2" />
<text  x="474.39" y="127.5" >Buffer</text>
</g>
<g >
<title>trans_state4 (23 samples, 0.06%)</title><rect x="1188.8" y="149" width="0.8" height="15.0" fill="rgb(243,158,42)" rx="2" ry="2" />
<text  x="1191.81" y="159.5" ></text>
</g>
<g >
<title>memcpy (378 samples, 1.06%)</title><rect x="1070.8" y="117" width="12.6" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="1073.83" y="127.5" ></text>
</g>
<g >
<title>@deserialize_go&lt;B&gt; (409 samples, 1.15%)</title><rect x="758.7" y="133" width="13.6" height="15.0" fill="rgb(251,176,51)" rx="2" ry="2" />
<text  x="761.72" y="143.5" ></text>
</g>
<g >
<title>@buffer_size&lt;vt&gt; (140 samples, 0.39%)</title><rect x="426.1" y="101" width="4.6" height="15.0" fill="rgb(237,118,36)" rx="2" ry="2" />
<text  x="429.10" y="111.5" ></text>
</g>
<g >
<title>to_4_tuple (47 samples, 0.13%)</title><rect x="745.6" y="85" width="1.6" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="748.60" y="95.5" ></text>
</g>
<g >
<title>parse_idl_header (889 samples, 2.50%)</title><rect x="790.7" y="133" width="29.5" height="15.0" fill="rgb(243,149,41)" rx="2" ry="2" />
<text  x="793.73" y="143.5" >pa..</text>
</g>
<g >
<title>@serialize&lt;B&gt; (329 samples, 0.92%)</title><rect x="640.2" y="117" width="10.9" height="15.0" fill="rgb(251,156,51)" rx="2" ry="2" />
<text  x="643.15" y="127.5" ></text>
</g>
<g >
<title>memcmp (179 samples, 0.50%)</title><rect x="349.2" y="117" width="6.0" height="15.0" fill="rgb(238,144,36)" rx="2" ry="2" />
<text  x="352.24" y="127.5" ></text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="731.6" y="133" width="1.1" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="734.56" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="391.4" y="101" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="394.38" y="111.5" ></text>
</g>
<g >
<title>leb128_decode (67 samples, 0.19%)</title><rect x="788.5" y="133" width="2.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="791.51" y="143.5" ></text>
</g>
<g >
<title>@serialize_go&lt;B&gt; (102 samples, 0.29%)</title><rect x="643.3" y="101" width="3.4" height="15.0" fill="rgb(251,156,51)" rx="2" ry="2" />
<text  x="646.33" y="111.5" ></text>
</g>
<g >
<title>text_of_ptr_size (117 samples, 0.33%)</title><rect x="684.6" y="117" width="3.9" height="15.0" fill="rgb(245,171,44)" rx="2" ry="2" />
<text  x="687.65" y="127.5" ></text>
</g>
<g >
<title>memset (104 samples, 0.29%)</title><rect x="222.7" y="117" width="3.4" height="15.0" fill="rgb(237,144,35)" rx="2" ry="2" />
<text  x="225.69" y="127.5" ></text>
</g>
<g >
<title>alloc_array (94 samples, 0.26%)</title><rect x="592.3" y="85" width="3.1" height="15.0" fill="rgb(239,128,37)" rx="2" ry="2" />
<text  x="595.31" y="95.5" ></text>
</g>
<g >
<title>store (14,292 samples, 40.13%)</title><rect x="716.5" y="165" width="473.5" height="15.0" fill="rgb(246,150,45)" rx="2" ry="2" />
<text  x="719.52" y="175.5" >store</text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="827.7" y="149" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="830.73" y="159.5" ></text>
</g>
<g >
<title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (47 samples, 0.13%)</title><rect x="687.0" y="101" width="1.5" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="689.96" y="111.5" ></text>
</g>
<g >
<title>obj_idx&lt;0&gt; (17 samples, 0.05%)</title><rect x="536.9" y="85" width="0.5" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="539.86" y="95.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="356.8" y="117" width="2.2" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="359.76" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="731.6" y="117" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="734.62" y="127.5" ></text>
</g>
<g >
<title>sleb128_decode (84 samples, 0.24%)</title><rect x="710.6" y="133" width="2.8" height="15.0" fill="rgb(250,128,49)" rx="2" ry="2" />
<text  x="713.62" y="143.5" ></text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="761.3" y="117" width="1.2" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="764.31" y="127.5" ></text>
</g>
<g >
<title>leb128_encode (24 samples, 0.07%)</title><rect x="437.7" y="85" width="0.8" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="440.73" y="95.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="713.7" y="133" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="716.67" y="143.5" ></text>
</g>
<g >
<title>B_eq (10 samples, 0.03%)</title><rect x="535.9" y="69" width="0.3" height="15.0" fill="rgb(239,130,38)" rx="2" ry="2" />
<text  x="538.86" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (45 samples, 0.13%)</title><rect x="533.5" y="37" width="1.5" height="15.0" fill="rgb(244,127,43)" rx="2" ry="2" />
<text  x="536.54" y="47.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="630.3" y="117" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="633.35" y="127.5" ></text>
</g>
<g >
<title>@reset_cycles (6 samples, 0.02%)</title><rect x="632.6" y="149" width="0.2" height="15.0" fill="rgb(244,161,43)" rx="2" ry="2" />
<text  x="635.60" y="159.5" ></text>
</g>
<g >
<title>alloc_blob (72 samples, 0.20%)</title><rect x="646.7" y="101" width="2.4" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="649.71" y="111.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="273.8" y="117" width="2.2" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="276.78" y="127.5" ></text>
</g>
<g >
<title>trans_state7 (13 samples, 0.04%)</title><rect x="716.1" y="149" width="0.4" height="15.0" fill="rgb(238,158,36)" rx="2" ry="2" />
<text  x="719.09" y="159.5" ></text>
</g>
<g >
<title>memcpy (59 samples, 0.17%)</title><rect x="649.1" y="101" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="652.10" y="111.5" ></text>
</g>
<g >
<title>leb128_encode (12 samples, 0.03%)</title><rect x="644.3" y="85" width="0.4" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="647.33" y="95.5" ></text>
</g>
<g >
<title>$lambda (338 samples, 0.95%)</title><rect x="640.0" y="133" width="11.2" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="642.99" y="143.5" ></text>
</g>
<g >
<title>reply_with_data (8 samples, 0.02%)</title><rect x="447.2" y="117" width="0.3" height="15.0" fill="rgb(235,175,33)" rx="2" ry="2" />
<text  x="450.21" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="805.1" y="117" width="1.2" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="808.14" y="127.5" ></text>
</g>
<g >
<title>text_compare (278 samples, 0.78%)</title><rect x="654.8" y="69" width="9.2" height="15.0" fill="rgb(248,171,47)" rx="2" ry="2" />
<text  x="657.83" y="79.5" ></text>
</g>
<g >
<title>alloc_words (52 samples, 0.15%)</title><rect x="596.4" y="101" width="1.7" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="599.42" y="111.5" ></text>
</g>
<g >
<title>__wasm_call_ctors (680 samples, 1.91%)</title><rect x="394.7" y="149" width="22.6" height="15.0" fill="rgb(239,119,38)" rx="2" ry="2" />
<text  x="397.73" y="159.5" >_..</text>
</g>
<g >
<title>@serialize&lt;&gt; (225 samples, 0.63%)</title><rect x="722.4" y="117" width="7.5" height="15.0" fill="rgb(242,156,41)" rx="2" ry="2" />
<text  x="725.41" y="127.5" ></text>
</g>
<g >
<title>memcmp (95 samples, 0.27%)</title><rect x="660.0" y="37" width="3.1" height="15.0" fill="rgb(238,144,36)" rx="2" ry="2" />
<text  x="662.96" y="47.5" ></text>
</g>
<g >
<title>getRec (659 samples, 1.85%)</title><rect x="651.6" y="117" width="21.8" height="15.0" fill="rgb(230,170,27)" rx="2" ry="2" />
<text  x="654.58" y="127.5" >g..</text>
</g>
<g >
<title>@deserialize_go&lt;t&gt; (406 samples, 1.14%)</title><rect x="681.2" y="133" width="13.5" height="15.0" fill="rgb(244,176,43)" rx="2" ry="2" />
<text  x="684.20" y="143.5" ></text>
</g>
<g >
<title>utf8_validate (185 samples, 0.52%)</title><rect x="688.5" y="117" width="6.2" height="15.0" fill="rgb(245,124,45)" rx="2" ry="2" />
<text  x="691.52" y="127.5" ></text>
</g>
<g >
<title>iter (438 samples, 1.23%)</title><rect x="448.0" y="117" width="14.5" height="15.0" fill="rgb(240,143,38)" rx="2" ry="2" />
<text  x="451.00" y="127.5" ></text>
</g>
<g >
<title>B_ge (10 samples, 0.03%)</title><rect x="536.2" y="69" width="0.3" height="15.0" fill="rgb(241,124,39)" rx="2" ry="2" />
<text  x="539.19" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="706.4" y="117" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="709.41" y="127.5" ></text>
</g>
<g >
<title>compare (574 samples, 1.61%)</title><rect x="654.4" y="101" width="19.0" height="15.0" fill="rgb(248,149,47)" rx="2" ry="2" />
<text  x="657.40" y="111.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="779.5" y="85" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="782.46" y="95.5" ></text>
</g>
<g >
<title>memset (4 samples, 0.01%)</title><rect x="788.1" y="117" width="0.1" height="15.0" fill="rgb(237,144,35)" rx="2" ry="2" />
<text  x="791.08" y="127.5" ></text>
</g>
<g >
<title>trans_state6 (13 samples, 0.04%)</title><rect x="715.7" y="149" width="0.4" height="15.0" fill="rgb(240,158,38)" rx="2" ry="2" />
<text  x="718.65" y="159.5" ></text>
</g>
<g >
<title>Array.idx (12 samples, 0.03%)</title><rect x="528.9" y="53" width="0.4" height="15.0" fill="rgb(247,150,46)" rx="2" ry="2" />
<text  x="531.94" y="63.5" ></text>
</g>
<g >
<title>$lambda (781 samples, 2.19%)</title><rect x="421.6" y="133" width="25.9" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="424.60" y="143.5" >$..</text>
</g>
<g >
<title>Text.compare_eq (282 samples, 0.79%)</title><rect x="654.7" y="85" width="9.3" height="15.0" fill="rgb(239,187,38)" rx="2" ry="2" />
<text  x="657.70" y="95.5" ></text>
</g>
<g >
<title>$lambda (5,371 samples, 15.08%)</title><rect x="420.2" y="149" width="177.9" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="423.21" y="159.5" >$lambda</text>
</g>
<g >
<title>alloc_blob (36 samples, 0.10%)</title><rect x="319.3" y="133" width="1.2" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="322.30" y="143.5" ></text>
</g>
<g >
<title>Array.idx_bigint (23 samples, 0.06%)</title><rect x="528.6" y="69" width="0.7" height="15.0" fill="rgb(238,150,36)" rx="2" ry="2" />
<text  x="531.57" y="79.5" ></text>
</g>
<g >
<title>insertRoot (339 samples, 0.95%)</title><rect x="738.8" y="117" width="11.3" height="15.0" fill="rgb(241,167,39)" rx="2" ry="2" />
<text  x="741.84" y="127.5" ></text>
</g>
<g >
<title>Array.idx (12 samples, 0.03%)</title><rect x="596.0" y="53" width="0.4" height="15.0" fill="rgb(247,150,46)" rx="2" ry="2" />
<text  x="599.02" y="63.5" ></text>
</g>
<g >
<title>obj_idx&lt;0&gt; (17 samples, 0.05%)</title><rect x="392.5" y="133" width="0.6" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="395.51" y="143.5" ></text>
</g>
<g >
<title>text_compare (278 samples, 0.78%)</title><rect x="664.2" y="69" width="9.2" height="15.0" fill="rgb(248,171,47)" rx="2" ry="2" />
<text  x="667.20" y="79.5" ></text>
</g>
<g >
<title>sleb128_decode (168 samples, 0.47%)</title><rect x="820.8" y="133" width="5.5" height="15.0" fill="rgb(250,128,49)" rx="2" ry="2" />
<text  x="823.77" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::text::text_compare_range::ha4c502cafd109f9c (237 samples, 0.67%)</title><rect x="656.2" y="53" width="7.8" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="659.19" y="63.5" ></text>
</g>
<g >
<title>trans_state3 (11 samples, 0.03%)</title><rect x="393.5" y="149" width="0.4" height="15.0" fill="rgb(245,158,44)" rx="2" ry="2" />
<text  x="396.54" y="159.5" ></text>
</g>
<g >
<title>from_2_tuple (6 samples, 0.02%)</title><rect x="542.0" y="69" width="0.2" height="15.0" fill="rgb(240,184,39)" rx="2" ry="2" />
<text  x="544.99" y="79.5" ></text>
</g>
<g >
<title>memcpy (60 samples, 0.17%)</title><rect x="644.7" y="85" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="647.72" y="95.5" ></text>
</g>
<g >
<title>anon-func-116.7 (30 samples, 0.08%)</title><rect x="595.4" y="85" width="1.0" height="15.0" fill="rgb(239,164,38)" rx="2" ry="2" />
<text  x="598.43" y="95.5" ></text>
</g>
<g >
<title>alloc_words (208 samples, 0.58%)</title><rect x="452.0" y="101" width="6.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="454.98" y="111.5" ></text>
</g>
<g >
<title>@serialize_go&lt;vt&gt; (235 samples, 0.66%)</title><rect x="430.7" y="101" width="7.8" height="15.0" fill="rgb(237,156,36)" rx="2" ry="2" />
<text  x="433.74" y="111.5" ></text>
</g>
<g >
<title>motoko_rts::text::text_get_range::hf3253fb1b86772bc (28 samples, 0.08%)</title><rect x="672.5" y="37" width="0.9" height="15.0" fill="rgb(226,127,24)" rx="2" ry="2" />
<text  x="675.49" y="47.5" ></text>
</g>
<g >
<title>leb128_decode (67 samples, 0.19%)</title><rect x="762.5" y="117" width="2.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="765.50" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="826.6" y="133" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="829.60" y="143.5" ></text>
</g>
<g >
<title>Array.idx_bigint (23 samples, 0.06%)</title><rect x="595.7" y="69" width="0.7" height="15.0" fill="rgb(238,150,36)" rx="2" ry="2" />
<text  x="598.66" y="79.5" ></text>
</g>
<g >
<title>sleb128_decode (168 samples, 0.47%)</title><rect x="766.7" y="117" width="5.6" height="15.0" fill="rgb(250,128,49)" rx="2" ry="2" />
<text  x="769.71" y="127.5" ></text>
</g>
<g >
<title>$lambda (1,087 samples, 3.05%)</title><rect x="638.4" y="149" width="36.0" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="641.43" y="159.5" >$la..</text>
</g>
<g >
<title>opt_inject (56 samples, 0.16%)</title><rect x="560.8" y="69" width="1.9" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="563.84" y="79.5" ></text>
</g>
<g >
<title>idl_sub_buf_words (9 samples, 0.03%)</title><rect x="788.2" y="133" width="0.3" height="15.0" fill="rgb(241,184,39)" rx="2" ry="2" />
<text  x="791.21" y="143.5" ></text>
</g>
<g >
<title>leb128_decode (268 samples, 0.75%)</title><rect x="621.5" y="117" width="8.8" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="624.47" y="127.5" ></text>
</g>
<g >
<title>text_of_ptr_size (147 samples, 0.41%)</title><rect x="775.7" y="117" width="4.9" height="15.0" fill="rgb(245,171,44)" rx="2" ry="2" />
<text  x="778.72" y="127.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="714.8" y="149" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="717.79" y="159.5" ></text>
</g>
<g >
<title>idl_sub_buf_init (19 samples, 0.05%)</title><rect x="787.6" y="133" width="0.6" height="15.0" fill="rgb(236,184,34)" rx="2" ry="2" />
<text  x="790.58" y="143.5" ></text>
</g>
<g >
<title>sleb128_decode (420 samples, 1.18%)</title><rect x="806.3" y="117" width="13.9" height="15.0" fill="rgb(250,128,49)" rx="2" ry="2" />
<text  x="809.26" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="319.4" y="117" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="322.36" y="127.5" ></text>
</g>
<g >
<title>toArray (315 samples, 0.88%)</title><rect x="587.7" y="117" width="10.4" height="15.0" fill="rgb(239,160,37)" rx="2" ry="2" />
<text  x="590.71" y="127.5" ></text>
</g>
<g >
<title>compute_crc32 (33 samples, 0.09%)</title><rect x="374.7" y="101" width="1.0" height="15.0" fill="rgb(245,149,44)" rx="2" ry="2" />
<text  x="377.65" y="111.5" ></text>
</g>
<g >
<title>alloc_words (130 samples, 0.36%)</title><rect x="732.7" y="133" width="4.4" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="735.75" y="143.5" ></text>
</g>
<g >
<title>B_add (25 samples, 0.07%)</title><rect x="535.0" y="69" width="0.9" height="15.0" fill="rgb(253,143,53)" rx="2" ry="2" />
<text  x="538.03" y="79.5" ></text>
</g>
<g >
<title>opt_project (14 samples, 0.04%)</title><rect x="584.0" y="85" width="0.4" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="586.97" y="95.5" ></text>
</g>
<g >
<title>opt_inject (14 samples, 0.04%)</title><rect x="393.1" y="133" width="0.4" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="396.07" y="143.5" ></text>
</g>
<g >
<title>toArray (3,888 samples, 10.92%)</title><rect x="469.3" y="133" width="128.8" height="15.0" fill="rgb(239,160,37)" rx="2" ry="2" />
<text  x="472.34" y="143.5" >toArray</text>
</g>
<g >
<title>retrieve (2,397 samples, 6.73%)</title><rect x="637.1" y="165" width="79.4" height="15.0" fill="rgb(240,162,39)" rx="2" ry="2" />
<text  x="640.10" y="175.5" >retrieve</text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::hf0f0a17700c3ab01 (550 samples, 1.54%)</title><rect x="226.1" y="117" width="18.3" height="15.0" fill="rgb(233,127,31)" rx="2" ry="2" />
<text  x="229.14" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::types::object_size::h0cd0fcbd64ac8470 (1,088 samples, 3.05%)</title><rect x="1152.8" y="117" width="36.0" height="15.0" fill="rgb(238,127,36)" rx="2" ry="2" />
<text  x="1155.76" y="127.5" >mot..</text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="646.8" y="85" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="649.84" y="95.5" ></text>
</g>
<g >
<title>Array.unsafe_idx (7 samples, 0.02%)</title><rect x="437.5" y="85" width="0.2" height="15.0" fill="rgb(247,150,46)" rx="2" ry="2" />
<text  x="440.50" y="95.5" ></text>
</g>
<g >
<title>utf8_validate (211 samples, 0.59%)</title><rect x="780.6" y="117" width="7.0" height="15.0" fill="rgb(245,124,45)" rx="2" ry="2" />
<text  x="783.59" y="127.5" ></text>
</g>
<g >
<title>canister_init (11,611 samples, 32.60%)</title><rect x="10.0" y="165" width="384.7" height="15.0" fill="rgb(236,106,34)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >canister_init</text>
</g>
<g >
<title>motoko_rts::memory::alloc_array::hdf61863d125c75ff (90 samples, 0.25%)</title><rect x="592.4" y="69" width="3.0" height="15.0" fill="rgb(244,127,43)" rx="2" ry="2" />
<text  x="595.45" y="79.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="746.3" y="69" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="749.30" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::mark_stack::push_mark_stack::h372a7e8aba233246 (300 samples, 0.84%)</title><rect x="263.8" y="101" width="10.0" height="15.0" fill="rgb(237,127,36)" rx="2" ry="2" />
<text  x="266.84" y="111.5" ></text>
</g>
<g >
<title>set_local %i2 (6 samples, 0.02%)</title><rect x="820.6" y="133" width="0.2" height="15.0" fill="rgb(247,154,46)" rx="2" ry="2" />
<text  x="823.57" y="143.5" ></text>
</g>
<g >
<title>memcpy (60 samples, 0.17%)</title><rect x="685.0" y="101" width="2.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="687.98" y="111.5" ></text>
</g>
<g >
<title>@serialize_go&lt;u&gt; (4 samples, 0.01%)</title><rect x="725.0" y="101" width="0.1" height="15.0" fill="rgb(243,156,42)" rx="2" ry="2" />
<text  x="727.96" y="111.5" ></text>
</g>
<g >
<title>@deserialize&lt;t&gt; (1,176 samples, 3.30%)</title><rect x="674.4" y="149" width="39.0" height="15.0" fill="rgb(244,176,43)" rx="2" ry="2" />
<text  x="677.44" y="159.5" >@de..</text>
</g>
<g >
<title>leb128_decode (67 samples, 0.19%)</title><rect x="695.6" y="133" width="2.2" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="698.58" y="143.5" ></text>
</g>
<g >
<title>anon-func-31.67 (12 samples, 0.03%)</title><rect x="541.8" y="85" width="0.4" height="15.0" fill="rgb(228,164,25)" rx="2" ry="2" />
<text  x="544.79" y="95.5" ></text>
</g>
<g >
<title>$lambda (234 samples, 0.66%)</title><rect x="722.2" y="133" width="7.8" height="15.0" fill="rgb(240,133,38)" rx="2" ry="2" />
<text  x="725.25" y="143.5" ></text>
</g>
<g >
<title>trans_state7 (26 samples, 0.07%)</title><rect x="636.2" y="149" width="0.9" height="15.0" fill="rgb(238,158,36)" rx="2" ry="2" />
<text  x="639.24" y="159.5" ></text>
</g>
<g >
<title>map (172 samples, 0.48%)</title><rect x="462.5" y="133" width="5.7" height="15.0" fill="rgb(240,99,39)" rx="2" ry="2" />
<text  x="465.51" y="143.5" ></text>
</g>
<g >
<title>memcpy (978 samples, 2.75%)</title><rect x="190.3" y="117" width="32.4" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="193.29" y="127.5" >me..</text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="749.2" y="85" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="752.21" y="95.5" ></text>
</g>
<g >
<title>opt_project (14 samples, 0.04%)</title><rect x="586.1" y="101" width="0.5" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="589.12" y="111.5" ></text>
</g>
<g >
<title>reply_with_data (4 samples, 0.01%)</title><rect x="651.1" y="117" width="0.1" height="15.0" fill="rgb(235,175,33)" rx="2" ry="2" />
<text  x="654.05" y="127.5" ></text>
</g>
<g >
<title>insertRec (160 samples, 0.45%)</title><rect x="741.9" y="101" width="5.3" height="15.0" fill="rgb(230,167,27)" rx="2" ry="2" />
<text  x="744.86" y="111.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (34 samples, 0.10%)</title><rect x="761.4" y="101" width="1.1" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="764.37" y="111.5" ></text>
</g>
<g >
<title>alloc_array (47 samples, 0.13%)</title><rect x="533.5" y="53" width="1.5" height="15.0" fill="rgb(239,128,37)" rx="2" ry="2" />
<text  x="536.48" y="63.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="747.7" y="85" width="0.8" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="750.66" y="95.5" ></text>
</g>
<g >
<title>alloc_blob (72 samples, 0.20%)</title><rect x="633.0" y="149" width="2.4" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="636.00" y="159.5" ></text>
</g>
<g >
<title>RBTree (452 samples, 1.27%)</title><rect x="304.3" y="133" width="15.0" height="15.0" fill="rgb(246,213,46)" rx="2" ry="2" />
<text  x="307.32" y="143.5" ></text>
</g>
<g >
<title>idl_sub_buf_words (9 samples, 0.03%)</title><rect x="695.3" y="133" width="0.3" height="15.0" fill="rgb(241,184,39)" rx="2" ry="2" />
<text  x="698.28" y="143.5" ></text>
</g>
<g >
<title>opt_project (126 samples, 0.35%)</title><rect x="562.7" y="69" width="4.2" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="565.70" y="79.5" ></text>
</g>
<g >
<title>to_4_tuple (47 samples, 0.13%)</title><rect x="748.5" y="101" width="1.6" height="15.0" fill="rgb(240,141,39)" rx="2" ry="2" />
<text  x="751.52" y="111.5" ></text>
</g>
<g >
<title>alloc_words (104 samples, 0.29%)</title><rect x="464.8" y="117" width="3.4" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="467.77" y="127.5" ></text>
</g>
<g >
<title>alloc_words (286 samples, 0.80%)</title><rect x="572.3" y="53" width="9.5" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="575.34" y="63.5" ></text>
</g>
<g >
<title>__wasm_apply_data_relocs (679 samples, 1.91%)</title><rect x="394.8" y="133" width="22.5" height="15.0" fill="rgb(244,119,43)" rx="2" ry="2" />
<text  x="397.76" y="143.5" >_..</text>
</g>
<g >
<title>alloc_blob (72 samples, 0.20%)</title><rect x="725.1" y="101" width="2.4" height="15.0" fill="rgb(239,128,38)" rx="2" ry="2" />
<text  x="728.10" y="111.5" ></text>
</g>
<g >
<title>link_start (45 samples, 0.13%)</title><rect x="417.3" y="149" width="1.4" height="15.0" fill="rgb(239,129,37)" rx="2" ry="2" />
<text  x="420.26" y="159.5" ></text>
</g>
<g >
<title>motoko_rts::text::alloc_text_blob::h65a8860ad2532130 (47 samples, 0.13%)</title><rect x="779.0" y="101" width="1.6" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="782.03" y="111.5" ></text>
</g>
<g >
<title>memcpy (90 samples, 0.25%)</title><rect x="776.0" y="101" width="3.0" height="15.0" fill="rgb(248,144,48)" rx="2" ry="2" />
<text  x="779.05" y="111.5" ></text>
</g>
<g >
<title>memset (8 samples, 0.02%)</title><rect x="609.1" y="117" width="0.2" height="15.0" fill="rgb(237,144,35)" rx="2" ry="2" />
<text  x="612.08" y="127.5" ></text>
</g>
<g >
<title>alloc_words (26 samples, 0.07%)</title><rect x="741.0" y="101" width="0.9" height="15.0" fill="rgb(241,128,39)" rx="2" ry="2" />
<text  x="744.00" y="111.5" ></text>
</g>
<g >
<title>B_gt (10 samples, 0.03%)</title><rect x="536.5" y="69" width="0.4" height="15.0" fill="rgb(232,124,30)" rx="2" ry="2" />
<text  x="539.52" y="79.5" ></text>
</g>
<g >
<title>leb128_decode (134 samples, 0.38%)</title><rect x="702.0" y="117" width="4.4" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="704.97" y="127.5" ></text>
</g>
<g >
<title>text_size (4 samples, 0.01%)</title><rect x="430.4" y="69" width="0.1" height="15.0" fill="rgb(245,171,44)" rx="2" ry="2" />
<text  x="433.38" y="79.5" ></text>
</g>
<g >
<title>obj_idx&lt;6&gt; (34 samples, 0.10%)</title><rect x="468.2" y="133" width="1.1" height="15.0" fill="rgb(240,139,39)" rx="2" ry="2" />
<text  x="471.21" y="143.5" ></text>
</g>
<g >
<title>Array_init (172 samples, 0.48%)</title><rect x="529.3" y="69" width="5.7" height="15.0" fill="rgb(236,150,34)" rx="2" ry="2" />
<text  x="532.34" y="79.5" ></text>
</g>
<g >
<title>obj_idx&lt;11&gt; (34 samples, 0.10%)</title><rect x="586.6" y="117" width="1.1" height="15.0" fill="rgb(245,139,44)" rx="2" ry="2" />
<text  x="589.58" y="127.5" ></text>
</g>
<g >
<title>next (1,419 samples, 3.98%)</title><rect x="537.4" y="101" width="47.0" height="15.0" fill="rgb(230,219,27)" rx="2" ry="2" />
<text  x="540.42" y="111.5" >next</text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::bitmap::BitmapIter::next::hf0f0a17700c3ab01 (735 samples, 2.06%)</title><rect x="1086.8" y="117" width="24.4" height="15.0" fill="rgb(233,127,31)" rx="2" ry="2" />
<text  x="1089.80" y="127.5" >m..</text>
</g>
<g >
<title>@serialize_go&lt;t&gt; (131 samples, 0.37%)</title><rect x="433.2" y="85" width="4.3" height="15.0" fill="rgb(244,156,43)" rx="2" ry="2" />
<text  x="436.16" y="95.5" ></text>
</g>
<g >
<title>@deserialize&lt;tB&gt; (2,302 samples, 6.46%)</title><rect x="750.1" y="149" width="76.2" height="15.0" fill="rgb(245,176,45)" rx="2" ry="2" />
<text  x="753.08" y="159.5" >@deseria..</text>
</g>
<g >
<title>opt_project (14 samples, 0.04%)</title><rect x="674.0" y="133" width="0.4" height="15.0" fill="rgb(241,186,39)" rx="2" ry="2" />
<text  x="676.98" y="143.5" ></text>
</g>
<g >
<title>leb128_encode (12 samples, 0.03%)</title><rect x="434.1" y="69" width="0.4" height="15.0" fill="rgb(250,149,49)" rx="2" ry="2" />
<text  x="437.06" y="79.5" ></text>
</g>
<g >
<title>motoko_rts::text::blob_of_text::hbedf98d705bae9d6 (20 samples, 0.06%)</title><rect x="390.3" y="117" width="0.7" height="15.0" fill="rgb(240,127,39)" rx="2" ry="2" />
<text  x="393.32" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="375.7" y="101" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="378.75" y="111.5" ></text>
</g>
<g >
<title>obj_idx&lt;0&gt; (17 samples, 0.05%)</title><rect x="737.1" y="133" width="0.5" height="15.0" fill="rgb(247,139,46)" rx="2" ry="2" />
<text  x="740.06" y="143.5" ></text>
</g>
<g >
<title>motoko_rts::memory::alloc_blob::hb87d531fc7688eb8 (68 samples, 0.19%)</title><rect x="1150.5" y="117" width="2.3" height="15.0" fill="rgb(230,127,27)" rx="2" ry="2" />
<text  x="1153.51" y="127.5" ></text>
</g>
<g >
<title>motoko_rts::gc::mark_compact::mark_object::h4c1039fc91f5c068 (1,188 samples, 3.34%)</title><rect x="1111.2" y="117" width="39.3" height="15.0" fill="rgb(233,127,31)" rx="2" ry="2" />
<text  x="1114.15" y="127.5" >mot..</text>
</g>
<g >
<title>@deserialize&lt;&gt; (1,040 samples, 2.92%)</title><rect x="598.1" y="149" width="34.5" height="15.0" fill="rgb(242,176,41)" rx="2" ry="2" />
<text  x="601.14" y="159.5" >@d..</text>
</g>
<g >
<title>all (35,618 samples, 100%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(255,230,55)" rx="2" ry="2" />
<text  x="13.00" y="191.5" ></text>
</g>
<g >
<title>idl_sub_buf_init (19 samples, 0.05%)</title><rect x="694.7" y="133" width="0.6" height="15.0" fill="rgb(236,184,34)" rx="2" ry="2" />
<text  x="697.65" y="143.5" ></text>
</g>
<g >
<title>@buffer_size&lt;t&gt; (37 samples, 0.10%)</title><rect x="429.3" y="85" width="1.2" height="15.0" fill="rgb(244,118,43)" rx="2" ry="2" />
<text  x="432.28" y="95.5" ></text>
</g>
<g >
<title>put (359 samples, 1.01%)</title><rect x="738.2" y="133" width="11.9" height="15.0" fill="rgb(234,152,31)" rx="2" ry="2" />
<text  x="741.18" y="143.5" ></text>
</g>
</g>
</svg>
