* Stable region PR. Working notes.
** Matthew Hammer
** 20230301


* Files

** Compiler files

*** motoko/src/codegen/compile.ml
*** motoko/src/prelude/prim.mo

** RTS files

*** motoko/rts/motoko-rts/src/region.rs
*** motoko/rts/motoko-rts/src/types.rs
*** motoko/rts/motoko-rts/src/memory/ic.rs

** Test files

*** motoko/test/run.sh
*** motoko/test/run-drun/stable-region-blob/Region.mo
*** motoko/test/run-drun/stable-region-blob.mo

* Experiments

** Q: Can Matthew add a new RTS function, exposed as a Prim.XYZ function by the compiler to a test?
*** A: Yes, it was simple and only touched a few files (three listed above).
*** Implemented a global counter in the RTS as a mutable global (REGION_NEXT_ID).
*** Exposed access to the RTS function via Prim.regionNextId
*** Made a passing test that calls that function and asserts its expected value.
*** 20230301-1539: Success (also wrote this summary).


** Q: Can Matthew implement the "region_new" RTS function?
*** A: Yes, at least partially.  It works, but is not totally complete yet (no access vector yet).
*** Also implemented another temporary helper, to get the ID of a Region as a Nat32.
*** The test asserts that the ID from the Region matches what REGION_NEXT_ID gives.
*** I have some confusion about how to return these kinds of scalars, given the skew stuff around everywhere.
*** When I tried using Value.from_scalar(id) I got a value that wasn't right.
*** Using Value.from_raw(id) worked, but it doesn't seem right, or I'm not understanding the conventions yet.
*** 20230301-1649: Success (also wrote this summary).

* grow
* load/store byte

** Q: Can Matthew support the legacy API with the new primitives and a special region?
*** Advice from Claudio on 20230228 during our team call.
*** TO DO
**** Re-direct existing primitives to use the new RTS entry points (change compile.ml)
**** Globally-allocate Region 0 (maybe similar to the global that I did for an experiment?)
**** Region 0 is held specially, but is structured like all other regions (extend RTS with those defs)
**** Support load/store operations on that Region representation.
